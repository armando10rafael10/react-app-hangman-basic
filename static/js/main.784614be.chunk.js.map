{"version":3,"sources":["Keyboard/Keyboard.js","CurrentWord/CurrentWord.js","Count/Count.js","App.js","index.js"],"names":["Keyboard","window","addEventListener","e","props","alphabet","indexOf","key","action","id","this","map","letter","onClick","className","usedLetter","Component","CurrentWord","currentWord","win","split","status","Count","attempt","maxAttempt","count","i","push","attemptToCount","value","App","state","wordCollection","toLowerCase","party","handleLetterClick","length","setState","pickNewWord","randomIndex","Math","floor","random","initPendu","console","log","keyCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.784614be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Keyboard.css';\n\nclass Keyboard extends Component{\n\n    componentDidMount() {\n        window.addEventListener(\"keyup\", (e) => {\n            if (this.props.alphabet.indexOf(e.key) !== -1) {\n                this.props.action(e.key)\n            }\n        })\n    }\n\n    render(){\n        return (\n                <div id=\"keyboard\">\n                    {\n                        this.props.alphabet.map(\n                            (letter, key) => {\n                                //console.log(key + \" => \" + letter)\n                                return <button \n                                        key={\"keyboard_\"+key}\n                                        onClick={ () => this.props.action(letter)}\n                                        className={ this.props.usedLetter.indexOf(letter) !== -1 ? \"used\" : \"\" }\n                                >{letter}</button>\n                            }\n                        )\n                    }\n                </div>\n                )\n    }\n    \n}\n\nexport default Keyboard","import React from 'react';\nimport './CurrentWord.css';\n\nconst CurrentWord = ({ currentWord, usedLetter, win }) => {\n    return (\n        <div id=\"current_word\">\n            {\n                currentWord.split('').map(\n                    (letter, key) => {\n\n                        let status = \"found\"\n                        if (usedLetter.indexOf(letter) === -1) {\n                            if (win === -1) {\n                                status = \"lost\"\n                            } else {\n                                status = \"notfound\"\n                            }\n                        }\n\n                        return <span\n                                    key={\"letter_\" +key}\n                                    className={status}\n                                >{status === \"found\" ? letter : \n                                (win === -1 ? letter : \" â€“\")}</span>\n                    }\n                    )\n            }\n        </div>\n    )\n}\n\nexport default CurrentWord","import React from 'react';\nimport './Count.css';\nimport './Count.css'\n\nconst Count = ({ attempt, maxAttempt }) => {\n    return (\n        <div id=\"life\">\n            {\n                attemptToCount(attempt, maxAttempt).map(\n                    (value, key) => { \n                        return <span\n                            key={\"count_\" + key}\n                            className={\"count \" + (value === 1 ? \"full\" : \"empty\")}         \n                        ></span>\n                    }\n                )\n            }\n        </div>\n    )\n}\n\nfunction attemptToCount(attempt, maxAttempt) {\n    let count = []\n    for(let i = 1; i <= maxAttempt; i++) {\n        if (i <= attempt) {\n            count.push(0)\n        } else {\n            count.push(1)\n        }\n    }\n    return count\n}\n\nexport default Count","import React, { Component } from 'react';\nimport './App.css';\nimport Keybooard from './Keyboard/Keyboard.js';\nimport CurrentWord from './CurrentWord/CurrentWord.js';\nimport Count from './Count/Count.js';\n\nclass App extends Component {\n  state = {\n            wordCollection: [\n              'arise',\n              'awake',\n              'bear',\n              'beat',\n              'become',\n              'begin',\n              'bend',\n              'bet',\n              'bid',\n              'bind',\n              'bite',\n              'bleed',\n              'blow',\n              'break',\n              'breed',\n              'bring',\n              'build',\n              'burn',\n              'burst',\n              'buy',\n              'cast',\n              'catch',\n              'choose',\n              'cling',\n              'come',\n              'cost',\n              'creep',\n              'cut',\n              'deal',\n              'dig',\n              'do',\n              'draw',\n              'dream',\n              'drink',\n              'drive',\n              'eat',\n              'fall',\n              'feed',\n              'feel',\n              'fight',\n              'find',\n              'flee',\n              'fly',\n              'forbid',\n              'forget',\n              'forgive',\n              'freeze',\n              'get',\n              'give',\n              'go',\n              'grind',\n              'grow',\n              'hang',\n              'have',\n              'hear',\n              'hide',\n              'hit',\n              'hold',\n              'hurt',\n              'keep',\n              'kneel',\n              'know',\n              'lay',\n              'lead',\n              'lean',\n              'leap',\n              'learn',\n              'leave',\n              'lend',\n              'let',\n              'lie',\n              'light',\n              'lose',\n              'make',\n              'mean',\n              'meet',\n              'overcome',\n              'pay',\n              'put',\n              'read',\n              'ride',\n              'ring',\n              'rise',\n              'run',\n              'say',\n              'see',\n              'seek',\n              'sell',\n              'send',\n              'set',\n              'sew',\n              'shake',\n              'shine',\n              'shoot',\n              'show',\n              'shrink',\n              'shut',\n              'sing',\n              'sit',\n              'sleep',\n              'slide',\n              'smell',\n              'sow',\n              'speak',\n              'speed',\n              'spell',\n              'spend',\n              'spill',\n              'spit',\n              'split',\n              'spoil',\n              'spread',\n              'stand',\n              'steal',\n              'sting',\n              'stink',\n              'strike',\n              'strive',\n              'swear',\n              'sweep',\n              'swim',\n              'take',\n              'teach',\n              'tear',\n              'tell',\n              'think',\n              'throw',\n              'tread',\n              'undergo',\n              'understand',\n              'undertake',\n              'wake',\n              'wear',\n              'weave',\n              'weep',\n              'win',\n              'wind',\n              'withdraw',\n              'wring',\n              'write'\n          ],\n            alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.toLowerCase().split(''),\n            currentWord: null,\n            usedLetter: [],\n            party: 0, // 0: neutral | -1 lost | 1 win\n            attempt: 0,\n            maxAttempt: 5\n          }\n\n  componentDidMount() {\n    window.addEventListener(\"keyup\", (e) => {\n      //console.log(e)\n      if (e.keyCode === 13) {\n        this.initPendu()\n      }\n    })\n    //this.initPendu()\n  }\n\n  handleLetterClick = (letter) => {\n    //console.log(\"letter clicked => \" + letter)\n\n    if (this.state.usedLetter.indexOf(letter) === -1) {\n\n      let attempt = this.state.attempt\n      let maxAttempt = this.state.maxAttempt\n      const usedLetter = [ letter, ...this.state.usedLetter]\n\n      if (this.state.currentWord.indexOf(letter) === -1) {\n        attempt = this.state.attempt + 1\n      }\n\n      let party = 1\n      for(let i = 0; i < this.state.currentWord.length; i++ ){\n        if(usedLetter.indexOf(this.state.currentWord[i]) === -1){\n          party = 0\n        }\n      }\n\n      if(attempt > this.state.maxAttempt && party === 0) {\n        party = -1\n      }\n      this.setState({ usedLetter, attempt, party })\n    }\n\n  }\n\n  pickNewWord = () => {\n      const randomIndex = Math.floor( Math.random() * this.state.wordCollection.length )\n      return this.state.wordCollection[ randomIndex ]\n  }\n\n  initPendu = () => {\n    this.setState({\n      currentWord: this.pickNewWord(),\n      usedLetter: [],\n      party: 0,\n      attempt: 0,\n      //maxAttempt: this.state.currentWord.length\n    })\n    console.log(this.state.maxAttempt)\n  }\n\n  render() {\n    return (\n      \n      <div className=\"pendu\">\n        <h1>HANGMAN GAME</h1>\n\n        {\n          (this.state.currentWord !== null) && \n              <CurrentWord \n                  currentWord={this.state.currentWord}\n                  usedLetter={this.state.usedLetter}\n                  win={this.state.party}\n              />\n        }\n\n        {\n          (this.state.currentWord !== null) &&\n                <Count \n                  attempt={this.state.attempt}\n                  maxAttempt={this.state.maxAttempt}\n                />\n        }\n\n        {\n          (this.state.party === 0 && this.state.currentWord !== null) &&        \n          <Keybooard \n            alphabet={this.state.alphabet}\n            usedLetter={this.state.usedLetter}\n            action={this.handleLetterClick}\n        />\n        }\n\n        {\n          //WINNING\n          this.state.party === 1 &&\n              <p id=\"won_msg\">CONGRATULATION</p>\n\n        }\n\n        {\n          //LOOSING\n          this.state.party === -1 &&\n              <p id=\"lost_msg\">LOST</p>\n\n        }\n\n        {\n          (this.state.currentWord === null || this.state.party !== 0) &&\n              <button id=\"newgame\" onClick={() => this.initPendu()}>New Game</button>\n        }\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}